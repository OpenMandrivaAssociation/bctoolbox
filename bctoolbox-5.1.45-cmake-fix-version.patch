--- a/cmake/BcToolboxCMakeUtils.cmake
+++ b/cmake/BcToolboxCMakeUtils.cmake
@@ -131,84 +131,7 @@
 endmacro()
 
 function(bc_compute_full_version OUTPUT_VERSION)
-	find_program(GIT_EXECUTABLE git NAMES Git CMAKE_FIND_ROOT_PATH_BOTH)
-	if(GIT_EXECUTABLE)
-		execute_process(
-			COMMAND "${GIT_EXECUTABLE}" "describe"
-			OUTPUT_VARIABLE GIT_DESCRIBE_VERSION
-			OUTPUT_STRIP_TRAILING_WHITESPACE
-			ERROR_QUIET
-			WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
-		)
-
-		# parse git describe version
-		if (NOT (GIT_DESCRIBE_VERSION MATCHES "^([0-9]+)[.]([0-9]+)[.]([0-9]+)(-alpha|-beta)?(-[0-9]+)?(-g[0-9a-f]+)?$"))
-			message(FATAL_ERROR "invalid git describe version: '${GIT_DESCRIBE_VERSION}'")
-		endif()
-		set(version_major ${CMAKE_MATCH_1})
-		set(version_minor ${CMAKE_MATCH_2})
-		set(version_patch ${CMAKE_MATCH_3})
-		if (CMAKE_MATCH_4)
-			string(SUBSTRING "${CMAKE_MATCH_4}" 1 -1 version_prerelease)
-		endif()
-		if (CMAKE_MATCH_5)
-			string(SUBSTRING "${CMAKE_MATCH_5}" 1 -1 version_commit)
-		endif()
-		if (CMAKE_MATCH_6)
-			string(SUBSTRING "${CMAKE_MATCH_6}" 2 -1 version_hash)
-		endif()
-
-		# interpret untagged hotfixes as pre-releases of the next "patch" release
-		if (NOT version_prerelease AND version_commit)
-			math(EXPR version_patch "${version_patch} + 1")
-			set(version_prerelease "pre")
-		endif()
-
-		# format full version
-		set(full_version "${version_major}.${version_minor}.${version_patch}")
-		if (version_prerelease)
-			string(APPEND full_version "-${version_prerelease}")
-			if (version_commit)
-				string(APPEND full_version ".${version_commit}+${version_hash}")
-			endif()
-		endif()
-
-		# check that the major and minor versions declared by the `project()` command are equal to the ones
-		# that have been found out while parsing `git describe` result.
-		if (PROJECT_VERSION)
-			set(short_git_version "${version_major}.${version_minor}")
-			set(short_project_version "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
-			if(NOT (short_project_version VERSION_EQUAL short_git_version))
-				message(FATAL_ERROR
-					"project and git version are not compatible (project: '${PROJECT_VERSION}', git: '${full_version}', at: '${CMAKE_CURRENT_SOURCE_DIR}'): "
-					"major and minor version are not equal !"
-				)
-			endif()
-		endif()
-
-		set(${OUTPUT_VERSION} "${full_version}" PARENT_SCOPE)
-	endif()
-endfunction()
-
-function(bc_compute_snapshots_or_releases_state OUTPUT_VERSION)
-	find_program(GIT_EXECUTABLE git NAMES Git CMAKE_FIND_ROOT_PATH_BOTH)
-	if(GIT_EXECUTABLE)
-		execute_process(
-			COMMAND "${GIT_EXECUTABLE}" "describe"
-			OUTPUT_VARIABLE GIT_DESCRIBE_VERSION
-			OUTPUT_STRIP_TRAILING_WHITESPACE
-			ERROR_QUIET
-			WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
-		)
-
-		# Check git describe to see if we are on a release or not
-		set(snapshots_or_releases_state "snapshots")
-		if(NOT GIT_DESCRIBE_VERSION MATCHES ".*(alpha|beta).*")
-			set(snapshots_or_releases_state "releases")
-		endif()
-
-		set(${OUTPUT_VERSION} "${snapshots_or_releases_state}" PARENT_SCOPE)
-	endif()
+   set(${OUTPUT_VERSION} "${default_version}" CACHE STRING "")
 endfunction()
 
 # Allows to get the distinct parts of a full version number.

